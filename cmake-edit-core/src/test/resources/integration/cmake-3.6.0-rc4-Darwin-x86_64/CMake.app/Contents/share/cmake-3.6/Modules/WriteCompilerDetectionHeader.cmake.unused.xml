<list>
  <problem>
    <problem>Value not used</problem>
    <details>set(_cmake_oldestSupported_${CompilerId} ${_cmake_oldestSupported} PARENT_SCOPE)</details>
    <lineRange>233</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_cmake_feature_test_${CompilerId}_${feature} ${_cmake_feature_test_${feature}} PARENT_SCOPE)</details>
    <lineRange>235</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_compiler_id_version_compute_${CompilerId} ${_compiler_id_version_compute} PARENT_SCOPE)</details>
    <lineRange>242</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(compilers
    GNU
    Clang
    AppleClang
    MSVC
    SunPro
    Intel
  )</details>
    <lineRange>320-327</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_hex_compilers ADSP Borland Embarcadero SunPro)</details>
    <lineRange>329</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>list(FIND compilers ${_comp} idx)</details>
    <lineRange>332</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>list(FIND _hex_compilers ${_comp} idx)</details>
    <lineRange>337</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_need_hex_conversion TRUE)</details>
    <lineRange>339</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(compiler_file_content_
&quot;#ifndef ${prefix_arg}_COMPILER_DETECTION_H
#  error This file may only be included from ${main_file_name}
#endif\n&quot;)</details>
    <lineRange>385-388</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(target_compilers)</details>
    <lineRange>392</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>list(FIND known_features ${feature} idx)</details>
    <lineRange>402</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}\n#ifdef __cplusplus\n&quot;)</details>
    <lineRange>409</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}\n#ifndef __cplusplus\n&quot;)</details>
    <lineRange>411</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}${ID_CONTENT}\n&quot;)</details>
    <lineRange>418</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(pp_if &quot;if&quot;)</details>
    <lineRange>420</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}\n#  ${pp_if} ${prefix_arg}_COMPILER_IS_${compiler}\n&quot;)</details>
    <lineRange>422</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(compile_file_name &quot;${_WCD_OUTPUT_DIR}${prefix_arg}_COMPILER_INFO_${compiler}_${_lang}.h&quot;)</details>
    <lineRange>425</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}\n#    include \&quot;${compile_file_name}\&quot;\n&quot;)</details>
    <lineRange>426</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(compiler_file_content compiler_file_content_${compiler}_${_lang})</details>
    <lineRange>430</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(compiler_file_content file_content)</details>
    <lineRange>432</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(${compiler_file_content} &quot;${${compiler_file_content}}
#    if !(${_cmake_oldestSupported_${compiler}})
#      error Unsupported compiler version
#    endif\n&quot;)</details>
    <lineRange>435-438</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(PREFIX ${prefix_arg}_)</details>
    <lineRange>440</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(MACRO_DEC ${prefix_arg}_DEC)</details>
    <lineRange>442</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(MACRO_HEX ${prefix_arg}_HEX)</details>
    <lineRange>443</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(MACRO_DEC)</details>
    <lineRange>445</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(MACRO_HEX)</details>
    <lineRange>446</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(${compiler_file_content} &quot;${${compiler_file_content}}${VERSION_BLOCK}\n&quot;)</details>
    <lineRange>449</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(PREFIX)</details>
    <lineRange>450</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(MACRO_DEC)</details>
    <lineRange>451</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(MACRO_HEX)</details>
    <lineRange>452</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(pp_if &quot;elif&quot;)</details>
    <lineRange>454</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(feature_PP &quot;COMPILER_${feature_upper}&quot;)</details>
    <lineRange>457</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_define_item &quot;\n#    define ${prefix_arg}_${feature_PP} 0\n&quot;)</details>
    <lineRange>458</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_define_item &quot;\n#    define ${prefix_arg}_${feature_PP} 1\n&quot;)</details>
    <lineRange>460</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_define_item &quot;\n#      define ${prefix_arg}_${feature_PP} 0\n&quot;)</details>
    <lineRange>462</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(_define_item &quot;\n#    if ${_cmake_feature_test_${compiler}_${feature}}\n#      define ${prefix_arg}_${feature_PP} 1\n#    else${_define_item}#    endif\n&quot;)</details>
    <lineRange>463</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(${compiler_file_content} &quot;${${compiler_file_content}}${_define_item}&quot;)</details>
    <lineRange>465</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  else
#    error Unsupported compiler
#  endif\n&quot;)</details>
    <lineRange>469-472</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(feature_PP &quot;COMPILER_${feature_upper}&quot;)</details>
    <lineRange>476</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_name ${prefix_arg}_${feature_PP})</details>
    <lineRange>477</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_RESTRICT&quot;)</details>
    <lineRange>479</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} restrict
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>480-486</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_CONSTEXPR&quot;)</details>
    <lineRange>489</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} constexpr
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>490-496</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_FINAL&quot;)</details>
    <lineRange>499</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} final
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>500-506</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_OVERRIDE&quot;)</details>
    <lineRange>509</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} override
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>510-516</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_STATIC_ASSERT(X)&quot;)</details>
    <lineRange>519</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value_msg &quot;${prefix_arg}_STATIC_ASSERT_MSG(X, MSG)&quot;)</details>
    <lineRange>520</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(static_assert_struct &quot;template&lt;bool&gt; struct ${prefix_arg}StaticAssert;\ntemplate&lt;&gt; struct ${prefix_arg}StaticAssert&lt;true&gt;{};\n&quot;)</details>
    <lineRange>521</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_standard &quot;#    define ${def_value} static_assert(X, #X)\n#    define ${def_value_msg} static_assert(X, MSG)&quot;)</details>
    <lineRange>522</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_alternative &quot;${static_assert_struct}#    define ${def_value} sizeof(${prefix_arg}StaticAssert&lt;X&gt;)\n#    define ${def_value_msg} sizeof(${prefix_arg}StaticAssert&lt;X&gt;)&quot;)</details>
    <lineRange>523</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}#  if ${def_name}\n${def_standard}\n#  else\n${def_alternative}\n#  endif\n\n&quot;)</details>
    <lineRange>524</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_ALIGNAS(X)&quot;)</details>
    <lineRange>527</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} alignas(X)
#  elif ${prefix_arg}_COMPILER_IS_GNU || ${prefix_arg}_COMPILER_IS_Clang || ${prefix_arg}_COMPILER_IS_AppleClang
#    define ${def_value} __attribute__ ((__aligned__(X)))
#  elif ${prefix_arg}_COMPILER_IS_MSVC
#    define ${def_value} __declspec(align(X))
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>528-538</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_ALIGNOF(X)&quot;)</details>
    <lineRange>541</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} alignof(X)
#  elif ${prefix_arg}_COMPILER_IS_GNU || ${prefix_arg}_COMPILER_IS_Clang || ${prefix_arg}_COMPILER_IS_AppleClang
#    define ${def_value} __alignof__(X)
#  elif ${prefix_arg}_COMPILER_IS_MSVC
#    define ${def_value} __alignof(X)
#  endif
\n&quot;)</details>
    <lineRange>542-550</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_DELETED_FUNCTION&quot;)</details>
    <lineRange>553</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} = delete
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>554-560</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_EXTERN_TEMPLATE&quot;)</details>
    <lineRange>563</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} extern
#  else
#    define ${def_value}
#  endif
\n&quot;)</details>
    <lineRange>564-570</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_NOEXCEPT&quot;)</details>
    <lineRange>573</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} noexcept
#    define ${def_value}_EXPR(X) noexcept(X)
#  else
#    define ${def_value}
#    define ${def_value}_EXPR(X)
#  endif
\n&quot;)</details>
    <lineRange>574-582</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_NULLPTR&quot;)</details>
    <lineRange>585</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} nullptr
#  else
#    define ${def_value} 0
#  endif
\n&quot;)</details>
    <lineRange>586-592</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_THREAD_LOCAL&quot;)</details>
    <lineRange>595</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  if ${def_name}
#    define ${def_value} thread_local
#  elif ${prefix_arg}_COMPILER_IS_GNU || ${prefix_arg}_COMPILER_IS_Clang || ${prefix_arg}_COMPILER_IS_AppleClang
#    define ${def_value} __thread
#  elif ${prefix_arg}_COMPILER_IS_MSVC
#    define ${def_value} __declspec(thread)
#  else
// ${def_value} not defined for this configuration.
#  endif
\n&quot;)</details>
    <lineRange>596-606</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_name ${prefix_arg}_${feature_PP})</details>
    <lineRange>609</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(def_value &quot;${prefix_arg}_DEPRECATED&quot;)</details>
    <lineRange>610</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}
#  ifndef ${def_value}
#    if ${def_name}
#      define ${def_value} [[deprecated]]
#      define ${def_value}_MSG(MSG) [[deprecated(MSG)]]
#    elif ${prefix_arg}_COMPILER_IS_GNU || ${prefix_arg}_COMPILER_IS_Clang
#      define ${def_value} __attribute__((__deprecated__))
#      define ${def_value}_MSG(MSG) __attribute__((__deprecated__(MSG)))
#    elif ${prefix_arg}_COMPILER_IS_MSVC
#      define ${def_value} __declspec(deprecated)
#      define ${def_value}_MSG(MSG) __declspec(deprecated(MSG))
#    else
#      define ${def_value}
#      define ${def_value}_MSG(MSG)
#    endif
#  endif
\n&quot;)</details>
    <lineRange>611-627</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(file_content &quot;${file_content}#endif\n&quot;)</details>
    <lineRange>631</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(compile_file_name &quot;${_WCD_OUTPUT_DIR}${prefix_arg}_COMPILER_INFO_${compiler}_${_lang}.h&quot;)</details>
    <lineRange>642</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(full_path &quot;${main_file_dir}/${compile_file_name}&quot;)</details>
    <lineRange>643</lineRange>
  </problem>
  <problem>
    <problem>Value not used</problem>
    <details>set(${_WCD_OUTPUT_FILES_VAR} ${${_WCD_OUTPUT_FILES_VAR}} PARENT_SCOPE)</details>
    <lineRange>652</lineRange>
  </problem>
</list>